import json
import requests
from pprint import pprint
from datetime import datetime


"""CLASS: CONNECTING TO BUGZILLA API WITH THE API TOKEN + BUG ID INSERTION --> FETCHING THE DATA"""


class Connector:
    def __init__(self, bug_id, key):
        self.bug_id = bug_id
        self.key = key

    def connection(self):
        print('Connection to Bugzilla API..')
        # Connection to the API by retrieving information for a bug using its ID to searching for
        # information related to it
        # The access to the API is succeeded by using a personal API key generated by the Bugzilla service in user's
        # personal account:
        # https://bugzilla.mozilla.org/userprefs.cgi?tab=apikey
        r = requests.get('https://bugzilla.mozilla.org/rest/bug/', params={'ids': '{}'.format(self.bug_id),
                                                                           'api_key': '{}'.format(self.key)})
        success_connection = str(r)
        if success_connection == '<Response [200]>':
            print('Connected successfully!')
            print('Fetching the data from the API..')
            # Data fetched in JSON format (Python Dictionary format)
            data = r.json()
            # Pretty printing of the JSON data
            # pprint(data)
            print()
            # returning the fetched JSON data
            return data
        else:
            data = 'Connection was not successful at this time. Please try again..'
            print(data)


"""CLASS: Handling all the data by a single bug """


class BugRetriever:
    def __init__(self, bug_id, key):
        self.bug_id = bug_id
        self.key = key

    def data_retriever(self):
        #
        # Object creation for the connection to the API and searching for the Bug by its unique ID
        connector = Connector(self.bug_id, self.key)
        # Fetching the data from the API
        data_fetched = connector.connection()

        if data_fetched:
            print()
            print('Bug ID:', self.bug_id)
            print('------------------')
            print()
            print()
            # pprint(data_fetched)
            # print(data_fetched.keys())
            for bugs in data_fetched.keys():
                if bugs == 'bugs':
                    for bug in data_fetched[bugs]:
                        bug_keys_list = bug.keys()
                        counter_keys_basic = 0
                        # BASIC FIELDS
                        print('BASIC FIELDS')
                        for key in bug_keys_list:
                            if not key.startswith('cf'):
                                # print(key + ':', bug.get(key))
                                counter_keys_basic += 1
                        # Summary
                        if bug['summary'] and bug['summary'] is not '':
                            print('Summary:', bug['summary'])
                        else:
                            print('Summary: No summary is available')
                        # Assigned_to
                        if bug['assigned_to'] and bug['assigned_to'] is not '':
                            print('Assigned to:', bug['assigned_to'])
                            # Assigned to Info
                            print('Assigned to - Info:')
                            print('\tEmail:', bug['assigned_to_detail']['email'])
                            print('\tID:', bug['assigned_to_detail']['id'])
                            print('\tName:', bug['assigned_to_detail']['name'])
                            print('\tNickname:', bug['assigned_to_detail']['nick'])
                            print('\tReal Name:', bug['assigned_to_detail']['real_name'])
                        else:
                            print('Assigned to: No assigned user.')
                        print('Blocks:')
                        list_blocks = bug['blocks']
                        if len(list_blocks) > 0:
                            counter_list_blocks = 1
                            for block_item in list_blocks:
                                print('\tBlock Item {}:'.format(counter_list_blocks), block_item)
                                counter_list_blocks += 1
                        else:
                            print('\tNo blocks listed at this time.')
                        # CC mails
                        print('CC:')
                        list_cc = bug['cc']
                        if len(list_cc) > 0:
                            counter_list_cc = 1
                            for cc in list_cc:
                                print('\tCC {}:'.format(counter_list_cc), cc)
                                counter_list_cc += 1
                            # CC Detail
                            print('CC Information:')
                            list_cc_detail = bug['cc_detail']
                            if len(list_cc_detail) > 0:
                                counter_cc_detail = 1
                                for cc_item in list_cc_detail:
                                    print('\tCC {} Information:'.format(counter_cc_detail))
                                    print('\t\tEmail:', cc_item['email'])
                                    print('\t\tID:', cc_item['id'])
                                    print('\t\tName:', cc_item['name'])
                                    print('\t\tNickname:', cc_item['nick'])
                                    print('\t\tReal Name:', cc_item['real_name'])
                                    counter_cc_detail += 1
                        else:
                            print('\tCC List: No CC listed at this time.')
                        # Classification
                        if bug['classification'] and bug['classification'] is not '':
                            print('Classification:', bug['classification'])
                        else:
                            print('Classification: No Classification defined at this time')
                        # Comments counted
                        if bug['comment_count']:
                            print('Comments Count:', bug['comment_count'])
                        else:
                            print('Comments Count: No Comments are available at this time')
                        # Component
                        if bug['component'] and bug['component'] is not '':
                            print('Component:', bug['component'])
                        else:
                            print('component: No component is defined')
                        # Creation Time
                        if bug['creation_time'] and bug['creation_time'] is not '':
                            print('Creation Time:', bug['creation_time'])
                        else:
                            print('Creation Time: No time of creation is available')
                        # Creator
                        if bug['creator'] and bug['creator'] is not '':
                            print('Creator:', bug['creator'])
                            # creator_detail
                            print('Creator Information:')
                            print('\tEmail:', bug['creator_detail']['email'])
                            print('\tID:', bug['creator_detail']['id'])
                            print('\tName:', bug['creator_detail']['name'])
                            print('\tNickname:', bug['creator_detail']['nick'])
                            print('\tReal Name:', bug['creator_detail']['real_name'])
                        else:
                            print('Creator: No creator is defined')
                        # Depends On
                        print('Depends On:')
                        depends_on_list = bug['depends_on']
                        if len(depends_on_list) > 0:
                            counter_depends_on_list = 1
                            for depends_item in depends_on_list:
                                print('\tDepends on {}'.format(counter_depends_on_list))
                                print('\t\t', depends_item)
                                counter_depends_on_list += 1
                        else:
                            print('\tNo dependencies found')
                        # Dupe of
                        if bug['dupe_of'] and bug['dupe_of'] is not None:
                            print('Dupe of:', bug['dupe_of'])
                        else:
                            print('Dupe of: No Dupe of information at this time')
                        # Duplicates
                        print('Duplicates:')
                        duplicates_list = bug['duplicates']
                        if len(duplicates_list) > 0:
                            counter_duplicates_list = 1
                            for duplicates_item in duplicates_list:
                                print('\tDuplicate {}'.format(counter_duplicates_list))
                                print('\t\t', duplicates_item)
                                counter_duplicates_list += 1
                        else:
                            print('\tNo listed items.')
                        # Flags
                        print('Flags:')
                        flags_list = bug['flags']
                        if len(flags_list) > 0:
                            counter_flags_list = 1
                            for flags_item in flags_list:
                                print('\tFlag {}'.format(counter_flags_list))
                                print('\t\t', flags_item)
                                counter_flags_list += 1
                        else:
                            print('\tNo listed items.')
                        # Groups
                        print('Groups:')
                        groups_list = bug['groups']
                        if len(groups_list) > 0:
                            counter_groups_list = 1
                            for group_item in groups_list:
                                print('\tGroup {}'.format(counter_groups_list))
                                print('\t\t', group_item)
                                counter_groups_list += 1
                        else:
                            print('\tNo listed items.')
                        # ID
                        if bug['id'] and bug['id'] is not None:
                            print('ID:', bug['id'])
                        else:
                            print('ID: No ID available')
                        # Is CC Accessble
                        print('CC Accessible:', bug['is_cc_accessible'])
                        # Is Confirmed
                        print('Confirmed:', bug['is_confirmed'])
                        # Is Creator  Accessible
                        print('Creator Accessible:', bug['is_creator_accessible'])
                        # Is Open
                        print('Open:', bug['is_open'])
                        # Keywords
                        print('Keywords:')
                        keywords_list = bug['keywords']
                        if len(keywords_list) > 0:
                            counter_keywords_list = 1
                            for keyword_item in keywords_list:
                                print('\tKeyword {}'.format(counter_keywords_list))
                                print('\t\t', keyword_item)
                                counter_keywords_list += 1
                        else:
                            print('\tNo listed keywords.')
                        # Last Change Time
                        if bug['last_change_time'] and bug['last_change_time'] is not '':
                            print('Last Change Time:', bug['last_change_time'])
                        else:
                            print('Last Change Time: No Last Change Time is available')
                        # Mentors
                        print('Mentors:')
                        mentors_list = bug['mentors']
                        if len(mentors_list) > 0:
                            counter_mentors_list = 1
                            for mentor_item in mentors_list:
                                print('\tMentor {}'.format(counter_mentors_list))
                                print('\t\t', mentor_item)
                                counter_mentors_list += 1
                            # Mentors Information
                            print('Mentors Information')
                            mentors_detail_list = bug['mentors_detail']
                            if len(mentors_detail_list) > 0:
                                counter_mentors_detail_list = 1
                                for mentor_item in mentors_detail_list:
                                    print('\tMentor {}'.format(counter_mentors_detail_list))
                                    print('\t\tEmail:', mentor_item['email'])
                                    print('\t\tID:', mentor_item['id'])
                                    print('\t\tName:', mentor_item['name'])
                                    print('\t\tNickname:', mentor_item['nick'])
                                    print('\t\tReal Name::', mentor_item['real_name'])
                                    counter_mentors_detail_list += 1
                        else:
                            print('\tNo listed items.')
                        # Operation System
                        if bug['op_sys'] and bug['op_sys'] is not '':
                            print('Operating System:', bug['op_sys'])
                        else:
                            print('Operating System: The operating system is not defined')
                        # Platform
                        if bug['platform'] and bug['platform'] is not '':
                            print('Platform:', bug['platform'])
                        else:
                            print('Platform: No platform defined')
                        # Priority
                        if bug['priority'] and bug['priority'] is not '':
                            print('Priority:', bug['priority'])
                        else:
                            print('Priority: The priority of the bug is not defined')
                        # Product
                        if bug['product'] and bug['product'] is not '':
                            print('Product:', bug['product'])
                        else:
                            print('Product: No product information is available')
                        # QA Contact
                        if bug['qa_contact'] and bug['qa_contact'] is not '':
                            print('QA Contact:', bug['qa_contact'])
                            # qa_contact_detail
                            print('QA Contact Information:')
                            print('\tEmail:', bug['qa_contact_detail']['email'])
                            print('\tID:', bug['qa_contact_detail']['id'])
                            print('\tName:', bug['qa_contact_detail']['name'])
                            print('\tNickname:', bug['qa_contact_detail']['nick'])
                            print('\tReal Name:', bug['qa_contact_detail']['real_name'])
                        else:
                            print('QA Contact: There is no QA Contact available.')
                        # Regressed by
                        print('Regressed By:')
                        regressed_by_list = bug['regressed_by']
                        if len(regressed_by_list) > 0:
                            counter_regressed_by_list = 1
                            for regressed_by_item in regressed_by_list:
                                print('\tRegressed by {}'.format(counter_regressed_by_list))
                                print('\t\t', regressed_by_item)
                                counter_regressed_by_list += 1
                        else:
                            print('\tNo listed items.')
                        # Regressions
                        print('Regressions:')
                        regressions_list = bug['regressions']
                        if len(regressions_list) > 0:
                            counter_regressions_list = 1
                            for regression_item in regressions_list:
                                print('\tRegression {}'.format(counter_regressions_list))
                                print('\t\t', regression_item)
                                counter_regressions_list += 1
                        else:
                            print('\tNo listed items.')
                        # Resolution
                        if bug['resolution'] and bug['resolution'] is not '':
                            print('Resolution:', bug['resolution'])
                        else:
                            print('Resolution: No resolution is defined')
                        # See Also
                        print('See Also:')
                        see_also_list = bug['see_also']
                        if len(see_also_list) > 0:
                            counter_see_also_list = 1
                            for see_item in see_also_list:
                                print('\tSee {}'.format(counter_see_also_list))
                                print('\t\t', see_item)
                                counter_see_also_list += 1
                        else:
                            print('\tNo listed items.')
                        # Severity
                        if bug['severity'] and bug['severity'] is not '':
                            print('Severity:', bug['severity'])
                        else:
                            print('Severity: Severity is not defined')
                        # Status
                        if bug['status'] and bug['status'] is not '':
                            print('Status:', bug['status'])
                        else:
                            print('Status: No status is available')
                        # Target Milestone
                        if bug['target_milestone'] and bug['target_milestone'] is not '---':
                            print('Target Milestone:', bug['target_milestone'])
                        else:
                            print('Target Milestone: No target milestone is available')
                        # Type
                        if bug['type'] and bug['type'] is not '':
                            print('Type:', bug['type'])
                        else:
                            print('Type: No bug type is available')
                        # Update Token
                        if bug['update_token'] and bug['update_token'] is not '':
                            print('Update Token:', bug['update_token'])
                        else:
                            print('Update Token: Update token is not available')
                        # URL
                        if bug['url'] and bug['url'] is not '':
                            print('URL:', bug['url'])
                        else:
                            print('URL: No URL defined')
                        # version
                        if bug['version'] and bug['version'] is not '':
                            print('Version:', bug['version'])
                        else:
                            print('Version: No version defined')
                        # votes
                        if bug['votes']:
                            print('Votes:', bug['votes'])
                        else:
                            print('Votes: No votes defined')
                        # whiteboard
                        if bug['whiteboard'] and bug['whiteboard'] is not '':
                            print('Whiteboard:', bug['whiteboard'])
                        else:
                            print('Whiteboard: Whiteboard is not available')
                        # alias
                        if bug['alias'] and bug['alias'] is not None:
                            print('Alias:', bug['alias'])
                        else:
                            print('Alias: No alias is specified')
                        print()
                        print('Countered Basic Fields:', counter_keys_basic)
                        print()
                        print('---')
                        print()
                        # CUSTOM FIELDS
                        print('CUSTOM FIELDS')
                        counter_keys_cf = 0
                        for key in bug_keys_list:
                            if key.startswith('cf'):
                                print(key + ':', bug.get(key))
                                counter_keys_cf += 1
                        print()
                        print('Countered Custom Fields:', counter_keys_cf)
                        print()
                        print()

                elif bugs != 'bugs' and bugs != 'faults':
                    pprint(data_fetched)


""" CLASS: Getting all comments for a single bug """


class Comments:
    def __init__(self, bug_id, key):
        self.bug_id = bug_id
        self.key = key

    def getting_comments(self):
        print()
        print('Bug ID:', self.bug_id)
        print('------------------')
        print()
        print()
        # url = 'https://bugzilla.mozilla.org/rest/bug/{}/comment'.format(self.bug_id)
        url = 'https://bugzilla.mozilla.org/rest/bug/{}/comment'.format(self.bug_id)
        u = url + "?token={}".format(self.key)
        r = requests.get(u)
        data = r.json()
        # pprint(data)
        # print(data.keys())
        for bugs in data.keys():
            if bugs == 'bugs':
                real_documents = data[bugs][str(self.bug_id)]['comments']
                counter_comments = 1
                for item in real_documents:
                    print('Comment {}'.format(counter_comments))
                    print('--')
                    print('Author:')
                    print(item['author'])
                    print('--')
                    print('Text:')
                    print(item['text'])
                    print('--')
                    print('Created at:')
                    print(item['creation_time'])
                    print('--')
                    print('Bug ID:')
                    print(item['bug_id'])
                    print()
                    print()
                    print('-----------------------------------------------------------------------------------')
                    print()
                    print()
                    counter_comments += 1
                print()
                print('Comments No.:', counter_comments - 1)
                print()
            elif bugs != 'bugs' and bugs != 'comments':
                print(data)


""" CLASS: Getting history of all metadata changes for a single bug """


class History:
    def __init__(self, bug_id, key):
        self.bug_id = bug_id
        self.key = key

    def getting_history(self):
        print()
        print('Bug ID:', self.bug_id)
        print('------------------')
        print()
        print()
        # url = 'https://bugzilla.mozilla.org/rest/bug/{}/history'.format(self.bug_id)
        url = 'https://bugzilla.mozilla.org/rest/bug/{}/history'.format(self.bug_id)
        u = url + "?token={}".format(self.key)
        r = requests.get(u)
        data = r.json()
        # print(data.keys())
        for bugs in data.keys():
            if bugs == 'bugs':
                real_documents = data['bugs'][0]['history']
                counter_history = 1
                for item in real_documents:
                    print('History {}'.format(counter_history))
                    print()
                    print('DateTime:', item['when'])
                    changes = item['changes']
                    print()
                    print('Changes:')
                    counter_changes = 0
                    for sub_item in changes:
                        print('\tchange {}'.format(counter_changes))
                        print('\t\tremoved:', sub_item['removed'])
                        print('\t\tadded:', sub_item['added'])
                        print('\t\tfield name:', sub_item['field_name'])
                        counter_changes += 1
                    print()
                    print('Who:', item['who'])
                    print()
                    print()
                    print('-----------------------------------------------------------------------------------')
                    print()
                    print()
                    counter_history += 1
                print()
                print('Countered histories:', counter_history - 1)
            else:
                print(data)


""" CLASS: Getting data for all the bugs assigned to a particular user  """


class UserBugs:
    def __init__(self, user, key):
        self.user = user
        self.key = key

    def getting_user_bugs(self):
        print()
        print('User:', self.user)
        print('------------------')
        print()
        print()
        # url = 'https://bugzilla.mozilla.org/rest/bug/{}/history'.format(self.bug_id)
        url = 'https://bugzilla.mozilla.org/rest/bug?assigned_to={}'.format(self.user)
        r = requests.get(url)
        data = r.json()
        # pprint(data)
        print()
        for bugs in data.keys():
            if bugs == 'bugs':
                bugs_counter = 1
                for item in data[bugs]:
                    print('User Bug: {}'.format(bugs_counter))
                    print()
                    # print(item.keys())
                    item_keys_list = item.keys()
                    counter_keys_basic = 0
                    # BASIC FIELDS
                    print('BASIC FIELDS')
                    for key in item_keys_list:
                        if not key.startswith('cf'):
                            # print(key + ':', item.get(key))
                            counter_keys_basic += 1
                    # Summary
                    if item['summary'] and item['summary'] is not '':
                        print('Summary:', item['summary'])
                    else:
                        print('Summary: No summary is defined')
                    # Assigned to
                    if item['assigned_to'] and item['assigned_to'] is not '':
                        print('Assigned to:', item['assigned_to'])
                        # Assigned to Info
                        print('Assigned to - Info:')
                        print('\tEmail:', item['assigned_to_detail']['email'])
                        print('\tID:', item['assigned_to_detail']['id'])
                        print('\tName:', item['assigned_to_detail']['name'])
                        print('\tNickname:', item['assigned_to_detail']['nick'])
                        print('\tReal Name:', item['assigned_to_detail']['real_name'])
                    else:
                        print('Assigned to: No assigned user.')
                    # blocks
                    print('Blocks:')
                    list_blocks = item['blocks']
                    if len(list_blocks) > 0:
                        counter_list_blocks = 1
                        for block_item in list_blocks:
                            print('\tBlock Item {}:'.format(counter_list_blocks), block_item)
                            counter_list_blocks += 1
                    else:
                        print('\tNo blocks listed at this time.')
                    # CC
                    print('CC:')
                    list_cc = item['cc']
                    if len(list_cc) > 0:
                        counter_list_cc = 1
                        for cc in list_cc:
                            print('\tCC {}:'.format(counter_list_cc), cc)
                            counter_list_cc += 1
                        # CC Detail
                        print('CC Information:')
                        list_cc_detail = item['cc_detail']
                        if len(list_cc_detail) > 0:
                            counter_cc_detail = 1
                            for cc_item in list_cc_detail:
                                print('\tCC {} Information:'.format(counter_cc_detail))
                                print('\t\tEmail:', cc_item['email'])
                                print('\t\tID:', cc_item['id'])
                                print('\t\tName:', cc_item['name'])
                                print('\t\tNickname:', cc_item['nick'])
                                print('\t\tReal Name:', cc_item['real_name'])
                                counter_cc_detail += 1
                    else:
                        print('\tCC List: No CC listed at this time.')
                    # classification
                    if item['classification'] and item['classification'] is not '':
                        print('Classification:', item['classification'])
                    else:
                        print('Classification: No classification is assigned')
                    # comment_count
                    if item['comment_count']:
                        print('Comment count:', item['comment_count'])
                    else:
                        print('Comment count: There is no comments field')
                    # component
                    if item['component'] and item['component'] is not '':
                        print('Component:', item['component'])
                    else:
                        print('Component: No component is defined')
                    # creation_time
                    if item['creation_time'] and item['creation_time'] is not '':
                        print('Created at:', item['creation_time'])
                    else:
                        print('Created at: No creation time is available at this time')
                    # creator
                    if item['creator'] and item['creator'] is not '':
                        print('Creator:', item['creator'])
                        # creator_detail
                        print('Creator Information:')
                        print('\tEmail:', item['creator_detail']['email'])
                        print('\tID:', item['creator_detail']['id'])
                        print('\tName:', item['creator_detail']['name'])
                        print('\tNickname:', item['creator_detail']['nick'])
                        print('\tReal Name:', item['creator_detail']['real_name'])
                    else:
                        print('Creator: No creator is defined')
                    # Depends On
                    print('Depends On:')
                    depends_on_list = item['depends_on']
                    if len(depends_on_list) > 0:
                        counter_depends_on_list = 1
                        for depends_item in depends_on_list:
                            print('\tDepends on {}'.format(counter_depends_on_list))
                            print('\t\t', depends_item)
                            counter_depends_on_list += 1
                    else:
                        print('\tNo listed items.')
                    # dupe of
                    if item['dupe_of'] and item['dupe_of'] is not None:
                        print('Dupe of:', item['dupe_of'])
                    else:
                        print('Dupe of: Nothing to show')
                    # Duplicates
                    print('Duplicates:')
                    duplicates_list = item['duplicates']
                    if len(duplicates_list) > 0:
                        counter_duplicates_list = 1
                        for duplicates_item in duplicates_list:
                            print('\tDuplicate {}'.format(counter_duplicates_list))
                            print('\t\t', duplicates_item)
                            counter_duplicates_list += 1
                    else:
                        print('\tNo listed items.')
                    # Flags
                    print('Flags:')
                    flags_list = item['flags']
                    if len(flags_list) > 0:
                        counter_flags_list = 1
                        for flags_item in flags_list:
                            print('\tFlag {}'.format(counter_flags_list))
                            print('\t\t', flags_item)
                            counter_flags_list += 1
                    else:
                        print('\tNo listed items.')
                    # Groups
                    print('Groups:')
                    groups_list = item['groups']
                    if len(groups_list) > 0:
                        counter_groups_list = 1
                        for group_item in groups_list:
                            print('\tGroup {}'.format(counter_groups_list))
                            print('\t\t', group_item)
                            counter_groups_list += 1
                    else:
                        print('\tNo listed items.')
                    # ID
                    if item['id'] and item['id'] is not None:
                        print('ID:', item['id'])
                    else:
                        print('ID: No ID defined')
                    # is_cc_accessible
                    print('CC Accessible', item['is_cc_accessible'])
                    # is_confirmed
                    print('Confirmed:', item['is_confirmed'])
                    # is_creator_accessible
                    print('Creator Accessible:', item['is_creator_accessible'])
                    # is_open
                    print('Open:', item['is_open'])
                    # Keywords
                    print('Keywords:')
                    keywords_list = item['keywords']
                    if len(keywords_list) > 0:
                        counter_keywords_list = 1
                        for keyword_item in keywords_list:
                            print('\tKeyword {}'.format(counter_keywords_list))
                            print('\t\t', keyword_item)
                            counter_keywords_list += 1
                    else:
                        print('\tNo listed keywords.')
                    # last_change_time
                    if item['last_change_time'] and item['last_change_time'] is not '':
                        print('Last Change Time:', item['last_change_time'])
                    else:
                        print('Last Change Time: No time defined')
                    # Mentors
                    print('Mentors:')
                    mentors_list = item['mentors']
                    if len(mentors_list) > 0:
                        counter_mentors_list = 1
                        for mentor_item in mentors_list:
                            print('\tMentor {}'.format(counter_mentors_list))
                            print('\t\t', mentor_item)
                            counter_mentors_list += 1
                        # Mentors Information
                        print('Mentors Information')
                        mentors_detail_list = item['mentors_detail']
                        if len(mentors_detail_list) > 0:
                            counter_mentors_detail_list = 1
                            for mentor_item in mentors_detail_list:
                                print('\tMentor {}'.format(counter_mentors_detail_list))
                                print('\t\tEmail:', mentor_item['email'])
                                print('\t\tID:', mentor_item['id'])
                                print('\t\tName:', mentor_item['name'])
                                print('\t\tNickname:', mentor_item['nick'])
                                print('\t\tReal Name::', mentor_item['real_name'])
                                print()
                                counter_mentors_detail_list += 1
                    else:
                        print('\tNo listed items.')
                    # op_sys
                    if item['op_sys'] and item['op_sys'] is not '':
                        print('Operating System:', item['op_sys'])
                    else:
                        print('Operating System: No OS defined')
                    # platform
                    if item['platform'] and item['platform'] is not '':
                        print('Platform:', item['platform'])
                    else:
                        print('Platform: No platform defined')
                    # priority
                    if item['priority'] and item['priority'] is not '':
                        print('Priority:', item['priority'])
                    else:
                        print('Priority: No priority defined')
                    # product
                    if item['product'] and item['product'] is not '':
                        print('Product:', item['product'])
                    else:
                        print('Product: No product defined')
                    # qa_contact
                    if item['qa_contact'] and item['qa_contact'] is not '':
                        print('QA Contact:', item['qa_contact'])
                        # qa_contact_detail
                        print('QA Contact Information:')
                        print('\tEmail:', item['qa_contact_detail']['email'])
                        print('\tID:', item['qa_contact_detail']['id'])
                        print('\tName:', item['qa_contact_detail']['name'])
                        print('\tNickname:', item['qa_contact_detail']['nick'])
                        print('\tReal Name:', item['qa_contact_detail']['real_name'])
                    else:
                        print('QA Contact: There is no QA Contact available.')
                    # Regressed By
                    print('Regressed By:')
                    regressed_by_list = item['regressed_by']
                    if len(regressed_by_list) > 0:
                        counter_regressed_by_list = 1
                        for regressed_by_item in regressed_by_list:
                            print('\tRegressed by {}'.format(counter_regressed_by_list))
                            print('\t\t', regressed_by_item)
                            counter_regressed_by_list += 1
                    else:
                        print('\tNo listed items.')
                    # regressions
                    print('Regressions:')
                    regressions_list = item['regressions']
                    if len(regressions_list) > 0:
                        counter_regressions_list = 1
                        for regression_item in regressions_list:
                            print('\tRegression {}'.format(counter_regressions_list))
                            print('\t\t', regression_item)
                            counter_regressions_list += 1
                    else:
                        print('\tNo listed items.')
                    # resolution
                    if item['resolution'] and item['resolution'] is not '':
                        print('Resolution:', item['resolution'])
                    else:
                        print('Resolution: No resolution defined')
                    # see also
                    print('See Also:')
                    see_also_list = item['see_also']
                    if len(see_also_list) > 0:
                        counter_see_also_list = 1
                        for see_item in see_also_list:
                            print('\tSee {}'.format(counter_see_also_list))
                            print('\t\t', see_item)
                            counter_see_also_list += 1
                    else:
                        print('\tNo listed items.')
                    # severity
                    if item['severity'] and item['severity'] is not '':
                        print('Severity:', item['severity'])
                    else:
                        print('Severity: No severity is defined')
                    # status
                    if item['status'] and item['status'] is not '':
                        print('Status:', item['status'])
                    else:
                        print('Status: No status defines')
                    # Target milestone
                    if item['target_milestone'] and item['target_milestone'] is not '---':
                        print('Target Milestone:', item['target_milestone'])
                    else:
                        print('Target Milestone: No targeted milestone defined')
                    # type
                    if item['type'] and item['type'] is not '':
                        print('Type:', item['type'])
                    else:
                        print('Type: No type defined')
                    # url
                    if item['url'] and item['url'] is not '':
                        print('URL:', item['url'])
                    else:
                        print('URL: No URL defined')
                    # version
                    if item['version'] and item['version'] is not '':
                        print('Version:', item['version'])
                    else:
                        print('Version: No version defined')
                    # votes
                    if item['votes']:
                        print('Votes:', item['votes'])
                    else:
                        print('Votes: No votes defined')
                    # whiteboard
                    if item['whiteboard'] and item['whiteboard'] is not '':
                        print('Whiteboard:', item['whiteboard'])
                    else:
                        print('Whiteboard: Whiteboard is not available')
                    # alias
                    if item['alias'] and item['alias'] is not None:
                        print('Alias:', item['alias'])
                    else:
                        print('Alias: No alias is specified')
                    print()
                    print('Countered Basic Fields:', counter_keys_basic)
                    print()
                    print('--')
                    # CUSTOM FIELDS
                    print('CUSTOM FIELDS')
                    counter_keys_cf = 0
                    for key in item_keys_list:
                        if key.startswith('cf'):
                            print(key + ':', item.get(key))
                            counter_keys_cf += 1
                    print()
                    print('Countered Custom Fields:', counter_keys_cf)
                    print()
                    print()
                    print('---------------------------------------------')
                    print()
                    print()
                    bugs_counter += 1
                print()
                print()
                print('Bugs counted:', bugs_counter - 1)
                print()
            else:
                print(data)


"""CLASS: Getting data for a user """


class UserInfo:
    def __init__(self, user, key):
        self.user = user
        self.key = key

    def getting_user_info(self):
        url = 'https://bugzilla.mozilla.org/rest/user?names={}'.format(self.user)
        # u = url + "?token={}".format(self.key)
        r = requests.get(url)
        data = r.json()
        # pprint(data)
        for user in data.keys():
            if user == 'users':
                for item in data[user]:
                    print('User Info')
                    keys_list = item.keys()
                    for field in keys_list:
                        print('\t' + field + ':', item.get(field))
            else:
                pprint(data)


if __name__ == '__main__':
    # Bug ID to searching for in the REST API
    bug_id_in_api = 1144467
    user_name = 'lhenry@mozilla.com'
    # Access key provided by the Bugzilla API Service
    # https://bugzilla.mozilla.org/home
    # An account is necessary, and the API Access Key can be generated here:
    # https://bugzilla.mozilla.org/userprefs.cgi?tab=apikey
    api_key = 'JjuxII3hzJBzpzxZ1erGO2vNMnqz5FigqMeTLdzw'

    # creating the objects for retrieving the information from the API and printing the fetched data

    # bug data
    bug_fetcher = BugRetriever(bug_id=str(bug_id_in_api), key=api_key)
    bug_fetcher.data_retriever()

    # bug comments
    # get_comments = Comments(bug_id=bug_id_in_api, key=api_key)
    # get_comments.getting_comments()

    # bug history
    # get_history = History(bug_id=bug_id_in_api, key=api_key)
    # get_history.getting_history()

    # bugs related to a user
    # user_bugs = UserBugs(user='lhenry@mozilla.com', key=api_key)
    # user_bugs.getting_user_bugs()

    # user information
    # user_info = UserInfo(user=user_name, key=api_key)
    # user_info.getting_user_info()
    print('---')
    print('Report time:', datetime.now())
    print()
